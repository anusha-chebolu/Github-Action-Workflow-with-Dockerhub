name: CICD for Dockerized Flask App

# Trigger this workflow on pushes and pull requests to the main branch.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Build and test the application (unit testing).
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository code.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment.
      # Although the step name mentions Python 3.8, we are actually installing Python 3.9.
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # Step 3: Install dependencies.
      # Upgrades pip and installs packages listed in requirements.txt.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run unit tests using pytest.
      - name: Run tests
        run: |
          python -m pytest

  # Job 2: Build and publish the Docker image.
  build-and-publish:
    # This job will only run if the build-and-test job succeeds.
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository code again for this job.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx which is used to build Docker images.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Login to DockerHub using credentials stored in the repository secrets.
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build and push the Docker image.
      # The 'id: build' is set to capture outputs (like the image digest) from this step.
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./DockerFile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/flasktest-app:latest

      # Step 5: Output the image digest to the workflow logs.
      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}
